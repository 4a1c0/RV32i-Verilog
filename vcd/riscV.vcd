$date
	Mon Sep 30 22:15:49 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module load_store_test $end
$scope module TB $end
$scope module package_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 1 # we_mem_data $end
$var wire 32 $ val_mem_prog [31:0] $end
$var wire 32 % val_mem_data_write [31:0] $end
$var wire 32 & val_mem_data_read [31:0] $end
$var wire 10 ' addr_mem_prog [9:0] $end
$var wire 10 ( addr_mem_data [9:0] $end
$scope module core_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 1 ) we_reg_file $end
$var wire 1 # we_mem_data_o $end
$var wire 32 * val_mem_prog_i [31:0] $end
$var wire 32 + val_mem_data_write_o [31:0] $end
$var wire 32 , val_mem_data_read_i [31:0] $end
$var wire 32 - rs2_reg_file [31:0] $end
$var wire 32 . rs1_reg_file [31:0] $end
$var wire 5 / r_num_write_reg_file [4:0] $end
$var wire 5 0 r2_num_read_reg_file [4:0] $end
$var wire 5 1 r1_num_read_reg_file [4:0] $end
$var wire 32 2 new_pc [31:0] $end
$var wire 1 3 mem_to_reg_t $end
$var wire 1 4 is_load_store_t $end
$var wire 1 5 is_branch_t $end
$var wire 1 6 is_absolute_t $end
$var wire 32 7 imm_val_t [31:0] $end
$var wire 2 8 data_origin_t [1:0] $end
$var wire 32 9 data_in_reg_file [31:0] $end
$var wire 10 : addr_mem_prog_o [9:0] $end
$var wire 10 ; addr_mem_data_o [9:0] $end
$var wire 3 < LIS_op_t [2:0] $end
$var wire 2 = BR_op_t [1:0] $end
$var wire 4 > ALU_op_t [3:0] $end
$scope module controlUnit_inst $end
$var wire 32 ? instruction [31:0] $end
$var reg 4 @ ALU_op [3:0] $end
$var reg 2 A BR_op_o [1:0] $end
$var reg 3 B LIS_op [2:0] $end
$var reg 2 C data_origin_o [1:0] $end
$var reg 3 D funct3 [2:0] $end
$var reg 7 E funct7 [6:0] $end
$var reg 12 F imm12 [11:0] $end
$var reg 12 G imm12b [11:0] $end
$var reg 12 H imm12s [11:0] $end
$var reg 20 I imm20 [19:0] $end
$var reg 20 J imm20j [19:0] $end
$var reg 32 K imm_val_o [31:0] $end
$var reg 1 5 is_branch_o $end
$var reg 1 4 is_load_store $end
$var reg 1 3 mem_to_reg $end
$var reg 1 # mem_w $end
$var reg 7 L opcode [6:0] $end
$var reg 5 M r1_addr [4:0] $end
$var reg 5 N r2_addr [4:0] $end
$var reg 5 O rd [4:0] $end
$var reg 5 P reg_addr [4:0] $end
$var reg 1 ) reg_r $end
$var reg 5 Q rs1 [4:0] $end
$var reg 5 R rs2 [4:0] $end
$upscope $end
$scope module exec_unit_inst $end
$var wire 4 S ALU_op [3:0] $end
$var wire 2 T BR_op [1:0] $end
$var wire 3 U LIS_op [2:0] $end
$var wire 2 V data_origin_i [1:0] $end
$var wire 32 W imm_val_i [31:0] $end
$var wire 1 5 is_branch_i $end
$var wire 1 4 is_loadstore $end
$var wire 1 X zero_alu_result $end
$var wire 32 Y val_mem_data_write_o [31:0] $end
$var wire 32 Z val_mem_data_read_i [31:0] $end
$var wire 32 [ rs2_i [31:0] $end
$var wire 32 \ rs1_i [31:0] $end
$var wire 10 ] old_pc_i [9:0] $end
$var wire 32 ^ new_pc_offset_o [31:0] $end
$var wire 32 _ mem_o [31:0] $end
$var wire 32 ` alu_o [31:0] $end
$var wire 10 a addr_mem_data_o [9:0] $end
$var reg 32 b d_o [31:0] $end
$var reg 1 6 is_absolute_o $end
$var reg 1 c is_conditional $end
$var reg 32 d s1_ALU [31:0] $end
$var reg 32 e s2_ALU [31:0] $end
$scope module ALU $end
$var wire 4 f ALU_op [3:0] $end
$var wire 32 g s1 [31:0] $end
$var wire 32 h s2 [31:0] $end
$var wire 1 X zero_o $end
$var wire 5 i shift [4:0] $end
$var reg 32 j d [31:0] $end
$upscope $end
$scope module BR $end
$var wire 1 X ALU_zero_i $end
$var wire 2 k BR_op_i [1:0] $end
$var wire 32 l alu_d [31:0] $end
$var wire 1 c is_conditional_i $end
$var wire 32 m new_pc_i [31:0] $end
$var wire 32 n old_pc_i [31:0] $end
$var wire 32 o new_pc_o [31:0] $end
$var reg 32 p offset [31:0] $end
$upscope $end
$scope module LIS $end
$var wire 3 q LIS_op [2:0] $end
$var wire 32 r addr_mem_i [31:0] $end
$var wire 32 s val_mem_write_i [31:0] $end
$var wire 32 t val_mem_read_i [31:0] $end
$var wire 10 u addr_mem_o [9:0] $end
$var reg 32 v val_mem_read_o [31:0] $end
$var reg 32 w val_mem_write_o [31:0] $end
$upscope $end
$upscope $end
$scope module program_counter_inst $end
$var wire 1 ! clk $end
$var wire 1 6 is_absolute_i $end
$var wire 1 5 is_branch_i $end
$var wire 10 x offset_i [9:0] $end
$var wire 1 " rst_n $end
$var wire 10 y offset [9:0] $end
$var reg 10 z addr [9:0] $end
$upscope $end
$scope module reg_file_inst $end
$var wire 1 ! clk $end
$var wire 32 { data_in [31:0] $end
$var wire 5 | r1_num_read [4:0] $end
$var wire 5 } r2_num_read [4:0] $end
$var wire 5 ~ r_num_write [4:0] $end
$var wire 1 " rst_n $end
$var wire 1 ) we $end
$var wire 32 !" rs2 [31:0] $end
$var wire 32 "" rs1 [31:0] $end
$scope begin REG $end
$var integer 32 #" j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_data_inst $end
$var wire 10 $" addr [9:0] $end
$var wire 1 ! clk $end
$var wire 32 %" data_in [31:0] $end
$var wire 1 " rst_n $end
$var wire 1 # we $end
$var wire 32 &" data_out [31:0] $end
$scope begin MEM_WRITE $end
$var integer 32 '" j [31:0] $end
$upscope $end
$upscope $end
$scope module mem_prog_inst $end
$var wire 10 (" addr [9:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var reg 32 )" data_out [31:0] $end
$scope begin MEM_READ $end
$var integer 32 *" j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000000000 *"
bx )"
b0 ("
b10000000000 '"
bx &"
bx %"
bx $"
b100000 #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
b0 z
b100 y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
b0 n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
0c
bx b
bx a
bx `
bx _
bx ^
b0 ]
bx \
bx [
bx Z
bx Y
xX
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
b0 :
bx 9
bx 8
bx 7
06
x5
x4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
b0 '
bx &
bx %
bx $
x#
0"
0!
$end
#50000
b10000000000 *"
b10000000000 '"
b100000 #"
1!
#100000
0!
1"
#150000
b100 n
b100 '
b100 :
b100 ]
b100 z
b100 ("
b1111 9
b1111 b
b1111 {
b1111 _
b1111 v
0X
b1 x
b11110000010010100001110000001111 &
b11110000010010100001110000001111 ,
b11110000010010100001110000001111 Z
b11110000010010100001110000001111 t
b11110000010010100001110000001111 &"
b1 2
b1 ^
b1 o
b1 (
b1 ;
b1 a
b1 u
b1 $"
b1 `
b1 j
b1 l
b1 r
b0 d
b0 g
b1 i
b0 -
b0 [
b0 s
b0 !"
b0 .
b0 \
b0 ""
b100 p
b1 e
b1 h
b1 R
b0 Q
b11 H
b10000000001 G
b10000000000 J
b11 O
b1 F
b100000000 I
b0 D
b0 E
b11 L
b0 0
b0 N
b0 }
b0 1
b0 M
b0 |
b11 /
b11 P
b11 ~
b1 7
b1 K
b1 W
b1 m
b0 <
b0 B
b0 U
b0 q
b0 =
b0 A
b0 T
b0 k
b0 >
b0 @
b0 S
b0 f
b1 8
b1 C
b1 V
05
1)
14
13
0#
b100000000000110000011 $
b100000000000110000011 *
b100000000000110000011 ?
b100000000000110000011 )"
1!
#200000
0!
#250000
b1000 n
b1000 '
b1000 :
b1000 ]
b1000 z
b1000 ("
b1110000001111 9
b1110000001111 b
b1110000001111 {
b1110000001111 _
b1110000001111 v
b1 <
b1 B
b1 U
b1 q
b100 H
b10 G
b110000000000 J
b100 O
b100000001 I
b1 D
b100 /
b100 P
b100 ~
b1 7
b1 K
b1 W
b1 m
b1 8
b1 C
b1 V
1)
14
13
b100000001001000000011 $
b100000001001000000011 *
b100000001001000000011 ?
b100000001001000000011 )"
1!
#300000
0!
#350000
b1100 n
b1100 '
b1100 :
b1100 ]
b1100 z
b1100 ("
b11110000010010100001110000001111 9
b11110000010010100001110000001111 b
b11110000010010100001110000001111 {
b11110000010010100001110000001111 _
b11110000010010100001110000001111 v
b101 H
b10000000010 G
b1010000000000 J
b101 O
b100000010 I
b10 D
b101 /
b101 P
b101 ~
b1 7
b1 K
b1 W
b1 m
b10 <
b10 B
b10 U
b10 q
b1 8
b1 C
b1 V
1)
14
13
b100000010001010000011 $
b100000010001010000011 *
b100000010001010000011 ?
b100000010001010000011 )"
1!
#400000
0!
#450000
b10000 n
b10000 '
b10000 :
b10000 ]
b10000 z
b10000 ("
b1110000001111 9
b1110000001111 b
b1110000001111 {
b1110000001111 _
b1110000001111 v
b110 H
b11 G
b10110000000000 J
b110 O
b100000101 I
b101 D
b110 /
b110 P
b110 ~
b1 7
b1 K
b1 W
b1 m
b100 <
b100 B
b100 U
b100 q
b1 8
b1 C
b1 V
1)
14
13
b100000101001100000011 $
b100000101001100000011 *
b100000101001100000011 ?
b100000101001100000011 )"
1!
#500000
0!
#550000
b10100 n
b10100 '
b10100 :
b10100 ]
b10100 z
b10100 ("
b1111 9
b1111 b
b1111 {
b1111 _
b1111 v
b111 H
b10000000011 G
b10010000000000 J
b111 O
b100000100 I
b100 D
b111 /
b111 P
b111 ~
b1 7
b1 K
b1 W
b1 m
b11 <
b11 B
b11 U
b11 q
b1 8
b1 C
b1 V
1)
14
13
b100000100001110000011 $
b100000100001110000011 *
b100000100001110000011 ?
b100000100001110000011 )"
1!
#600000
0!
#650000
b11000 n
b11000 '
b11000 :
b11000 ]
b11000 z
b11000 ("
b0 p
b10000 _
b10000 v
1X
b0 x
b10000000100000001000000010000 &
b10000000100000001000000010000 ,
b10000000100000001000000010000 Z
b10000000100000001000000010000 t
b10000000100000001000000010000 &"
b0 2
b0 ^
b0 o
b0 (
b0 ;
b0 a
b0 u
b0 $"
b0 `
b0 j
b0 l
b0 r
b0 i
b0 9
b0 b
b0 {
b0 e
b0 h
b0 R
b0 H
b0 G
b0 J
b0 O
b0 F
b0 I
b0 D
b0 L
b0 /
b0 P
b0 ~
b0 7
b0 K
b0 W
b0 m
b0 <
b0 B
b0 U
b0 q
b0 8
b0 C
b0 V
0)
04
03
b0 $
b0 *
b0 ?
b0 )"
1!
#700000
b0 _
b0 v
b0 &
b0 ,
b0 Z
b0 t
b0 &"
b0 n
b0 '
b0 :
b0 ]
b0 z
b0 ("
b10000000000 *"
b10000000000 '"
b100000 #"
0!
0"
#750000
b10000000000 *"
b10000000000 '"
b100000 #"
1!
#800000
b10000 _
b10000 v
b10000000100000001000000010000 &
b10000000100000001000000010000 ,
b10000000100000001000000010000 Z
b10000000100000001000000010000 t
b10000000100000001000000010000 &"
0!
1"
#850000
b100 n
b100 '
b100 :
b100 ]
b100 z
b100 ("
b10000000100000001000000010000 _
b10000000100000001000000010000 v
b10000000100000001000000010000 9
b10000000100000001000000010000 b
b10000000100000001000000010000 {
b10 <
b10 B
b10 U
b10 q
b1 8
b1 C
b1 V
b1 /
b1 P
b1 ~
1)
13
14
b1 H
b10000000000 G
b1000000000000 J
b1 O
b10 I
b10 D
b11 L
b10000010000011 $
b10000010000011 *
b10000010000011 ?
b10000010000011 )"
1!
#900000
0!
#950000
b1000 n
b1000 '
b1000 :
b1000 ]
b1000 z
b1000 ("
b11110000010010100001110000001111 9
b11110000010010100001110000001111 b
b11110000010010100001110000001111 {
b11110000010010100001110000001111 _
b11110000010010100001110000001111 v
0X
b1 x
b11110000010010100001110000001111 &
b11110000010010100001110000001111 ,
b11110000010010100001110000001111 Z
b11110000010010100001110000001111 t
b11110000010010100001110000001111 &"
b1 2
b1 ^
b1 o
b1 (
b1 ;
b1 a
b1 u
b1 $"
b1 `
b1 j
b1 l
b1 r
b1 i
b100 p
b1 e
b1 h
b1 7
b1 K
b1 W
b1 m
b1 R
b10 H
b1 G
b1010000000000 J
b10 O
b1 F
b100000010 I
b10 /
b10 P
b10 ~
b10 <
b10 B
b10 U
b10 q
b1 8
b1 C
b1 V
1)
14
13
b100000010000100000011 $
b100000010000100000011 *
b100000010000100000011 ?
b100000010000100000011 )"
1!
#1000000
0!
#1050000
b1100 n
b1100 '
b1100 :
b1100 ]
b1100 z
b1100 ("
b10001000100010001000100010001 9
b10001000100010001000100010001 b
b10001000100010001000100010001 {
b10001000100010001000100010001 _
b10001000100010001000100010001 v
b10 x
b10001000100010001000100010001 &
b10001000100010001000100010001 ,
b10001000100010001000100010001 Z
b10001000100010001000100010001 t
b10001000100010001000100010001 &"
b10 2
b10 ^
b10 o
b10 (
b10 ;
b10 a
b10 u
b10 $"
b10 `
b10 j
b10 l
b10 r
b10 i
b10 e
b10 h
b10 R
b11 H
b10000000001 G
b1000000000001 J
b11 O
b10 F
b1000000010 I
b11 /
b11 P
b11 ~
b10 7
b10 K
b10 W
b10 m
b10 <
b10 B
b10 U
b10 q
b1 8
b1 C
b1 V
1)
14
13
b1000000010000110000011 $
b1000000010000110000011 *
b1000000010000110000011 ?
b1000000010000110000011 )"
1!
#1100000
0!
#1150000
b10000 n
b10000 '
b10000 :
b10000 ]
b10000 z
b10000 ("
b11111111111111111111111111111111 9
b11111111111111111111111111111111 b
b11111111111111111111111111111111 {
b11111111111111111111111111111111 _
b11111111111111111111111111111111 v
b11 x
b11111111111111111111111111111111 &
b11111111111111111111111111111111 ,
b11111111111111111111111111111111 Z
b11111111111111111111111111111111 t
b11111111111111111111111111111111 &"
b11 2
b11 ^
b11 o
b11 (
b11 ;
b11 a
b11 u
b11 $"
b11 `
b11 j
b11 l
b11 r
b11 i
b11 e
b11 h
b11 R
b100 H
b10 G
b1010000000001 J
b100 O
b11 F
b1100000010 I
b100 /
b100 P
b100 ~
b11 7
b11 K
b11 W
b11 m
b10 <
b10 B
b10 U
b10 q
b1 8
b1 C
b1 V
1)
14
13
b1100000010001000000011 $
b1100000010001000000011 *
b1100000010001000000011 ?
b1100000010001000000011 )"
1!
#1200000
0!
#1250000
b10100 n
b10100 '
b10100 :
b10100 ]
b10100 z
b10100 ("
b1010 x
b1010 2
b1010 ^
b1010 o
b1010 (
b1010 ;
b1010 a
b1010 u
b1010 $"
b0 &
b0 ,
b0 Z
b0 t
b0 &"
b1010 `
b1010 j
b1010 l
b1010 r
b1010 i
b10000000100000001000000010000 -
b10000000100000001000000010000 [
b10000000100000001000000010000 s
b10000000100000001000000010000 !"
b10000000100000001000000010000 %
b10000000100000001000000010000 +
b10000000100000001000000010000 Y
b10000000100000001000000010000 w
b10000000100000001000000010000 %"
b1010 e
b1010 h
1#
b1 0
b1 N
b1 }
b1 R
b1010 H
b101 G
b1010000000000 J
b1010 O
b1 F
b100000010 I
b100011 L
b0 /
b0 P
b0 ~
b1010 7
b1010 K
b1010 W
b1010 m
b111 <
b111 B
b111 U
b111 q
b1 8
b1 C
b1 V
0)
14
03
b100000010010100100011 $
b100000010010100100011 *
b100000010010100100011 ?
b100000010010100100011 )"
1!
#1300000
0!
#1350000
b11000 n
b11000 '
b11000 :
b11000 ]
b11000 z
b11000 ("
b1011 x
b1011 2
b1011 ^
b1011 o
b1011 (
b1011 ;
b1011 a
b1011 u
b1011 $"
b1011 `
b1011 j
b1011 l
b1011 r
b1011 i
b11110000010010100001110000001111 -
b11110000010010100001110000001111 [
b11110000010010100001110000001111 s
b11110000010010100001110000001111 !"
b1110000001111 %
b1110000001111 +
b1110000001111 Y
b1110000001111 w
b1110000001111 %"
b1011 e
b1011 h
b10 R
b1011 H
b10000000101 G
b100000000001 J
b1011 O
b10 F
b1000000001 I
b1 D
b10 0
b10 N
b10 }
b1011 7
b1011 K
b1011 W
b1011 m
b110 <
b110 B
b110 U
b110 q
b1 8
b1 C
b1 V
14
1#
b1000000001010110100011 $
b1000000001010110100011 *
b1000000001010110100011 ?
b1000000001010110100011 )"
1!
#1400000
0!
#1450000
b11100 n
b11100 '
b11100 :
b11100 ]
b11100 z
b11100 ("
b1100 x
b1100 2
b1100 ^
b1100 o
b1100 (
b1100 ;
b1100 a
b1100 u
b1100 $"
b1100 `
b1100 j
b1100 l
b1100 r
b1100 i
b10001000100010001000100010001 -
b10001000100010001000100010001 [
b10001000100010001000100010001 s
b10001000100010001000100010001 !"
b10001 %
b10001 +
b10001 Y
b10001 w
b10001 %"
b1100 e
b1100 h
b11 R
b1100 H
b110 G
b10000000001 J
b1100 O
b11 F
b1100000000 I
b0 D
b11 0
b11 N
b11 }
b1100 7
b1100 K
b1100 W
b1100 m
b101 <
b101 B
b101 U
b101 q
b1 8
b1 C
b1 V
14
1#
b1100000000011000100011 $
b1100000000011000100011 *
b1100000000011000100011 ?
b1100000000011000100011 )"
1!
#1500000
0!
#1550000
b100000 n
b100000 '
b100000 :
b100000 ]
b100000 z
b100000 ("
b1101 x
b1101 2
b1101 ^
b1101 o
b1101 (
b1101 ;
b1101 a
b1101 u
b1101 $"
b1101 `
b1101 j
b1101 l
b1101 r
b1101 i
b11111111111111111111111111111111 -
b11111111111111111111111111111111 [
b11111111111111111111111111111111 s
b11111111111111111111111111111111 !"
b11111111111111111111111111111111 %
b11111111111111111111111111111111 +
b11111111111111111111111111111111 Y
b11111111111111111111111111111111 w
b11111111111111111111111111111111 %"
b1101 e
b1101 h
b100 R
b1101 H
b10000000110 G
b1000000000010 J
b1101 O
b100 F
b10000000010 I
b10 D
b100 0
b100 N
b100 }
b1101 7
b1101 K
b1101 W
b1101 m
b111 <
b111 B
b111 U
b111 q
b1 8
b1 C
b1 V
14
1#
b10000000010011010100011 $
b10000000010011010100011 *
b10000000010011010100011 ?
b10000000010011010100011 )"
1!
#1600000
0!
#1650000
b100100 n
b100100 '
b100100 :
b100100 ]
b100100 z
b100100 ("
b1010 x
b10000000100000001000000010000 &
b10000000100000001000000010000 ,
b10000000100000001000000010000 Z
b10000000100000001000000010000 t
b10000000100000001000000010000 &"
b1010 2
b1010 ^
b1010 o
b1010 (
b1010 ;
b1010 a
b1010 u
b1010 $"
b10000000100000001000000010000 9
b10000000100000001000000010000 b
b10000000100000001000000010000 {
b1010 `
b1010 j
b1010 l
b1010 r
b1010 i
b0 -
b0 [
b0 s
b0 !"
b10000000100000001000000010000 _
b10000000100000001000000010000 v
b1010 e
b1010 h
b101 /
b101 P
b101 ~
1)
13
b1010 R
b101 H
b10000000010 G
b1000000000101 J
b101 O
b1010 F
b101000000010 I
b11 L
b0 0
b0 N
b0 }
b1010 7
b1010 K
b1010 W
b1010 m
b10 <
b10 B
b10 U
b10 q
b1 8
b1 C
b1 V
14
0#
b101000000010001010000011 $
b101000000010001010000011 *
b101000000010001010000011 ?
b101000000010001010000011 )"
1!
#1700000
0!
#1750000
b101000 n
b101000 '
b101000 :
b101000 ]
b101000 z
b101000 ("
b0 p
1X
b0 x
b0 2
b0 ^
b0 o
b0 (
b0 ;
b0 a
b0 u
b0 $"
b0 `
b0 j
b0 l
b0 r
b0 i
b10000 _
b10000 v
b0 9
b0 b
b0 {
b0 e
b0 h
b0 R
b0 H
b0 G
b0 J
b0 O
b0 F
b0 I
b0 D
b0 L
b0 /
b0 P
b0 ~
b0 7
b0 K
b0 W
b0 m
b0 <
b0 B
b0 U
b0 q
b0 8
b0 C
b0 V
0)
04
03
b0 $
b0 *
b0 ?
b0 )"
1!
#1800000
0!
#1850000
b101100 n
b101100 '
b101100 :
b101100 ]
b101100 z
b101100 ("
1!
#1900000
0!
