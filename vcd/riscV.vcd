$date
	Mon Nov 25 18:53:30 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module load_store_test $end
$scope module TB $end
$scope module top_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 4 # write_transfer [3:0] $end
$var wire 1 $ we_mem_data $end
$var wire 32 % val_mem_prog [31:0] $end
$var wire 32 & val_mem_data_write [31:0] $end
$var wire 32 ' val_mem_data_read [31:0] $end
$var wire 1 ( rvalid_mem_data_t $end
$var wire 1 ) req_mem_data_t $end
$var wire 1 * gnt_mem_data_t $end
$var wire 10 + addr_mem_prog [9:0] $end
$var wire 10 , addr_mem_data [9:0] $end
$scope module core_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 4 - write_transfer_mem_data_o [3:0] $end
$var wire 1 . we_reg_file $end
$var wire 1 $ we_mem_data_o $end
$var wire 32 / val_mem_prog_i [31:0] $end
$var wire 32 0 val_mem_data_write_o [31:0] $end
$var wire 32 1 val_mem_data_read_i [31:0] $end
$var wire 1 ( rvalid_mem_data_i $end
$var wire 32 2 rs2_reg_file [31:0] $end
$var wire 32 3 rs1_reg_file [31:0] $end
$var wire 1 ) req_mem_data_o $end
$var wire 5 4 r_num_write_reg_file [4:0] $end
$var wire 5 5 r2_num_read_reg_file [4:0] $end
$var wire 5 6 r1_num_read_reg_file [4:0] $end
$var wire 32 7 new_pc [31:0] $end
$var wire 1 8 is_stall_t $end
$var wire 1 9 is_load_store_t $end
$var wire 1 : is_branch_t $end
$var wire 1 ; is_absolute_t $end
$var wire 32 < imm_val_t [31:0] $end
$var wire 1 * gnt_mem_data_i $end
$var wire 2 = data_origin_t [1:0] $end
$var wire 32 > data_in_reg_file [31:0] $end
$var wire 32 ? csr_val_w [31:0] $end
$var wire 32 @ csr_val_r [31:0] $end
$var wire 3 A csr_op_t [2:0] $end
$var wire 12 B csr_addr_t [11:0] $end
$var wire 10 C addr_mem_prog_o [9:0] $end
$var wire 10 D addr_mem_data_o [9:0] $end
$var wire 3 E LIS_op_t [2:0] $end
$var wire 2 F BR_op_t [1:0] $end
$var wire 4 G ALU_op_t [3:0] $end
$scope module controlUnit_inst $end
$var wire 1 ( mem_rvalid_i $end
$var wire 1 * mem_gnt_i $end
$var wire 32 H instruction [31:0] $end
$var reg 4 I ALU_op [3:0] $end
$var reg 2 J BR_op_o [1:0] $end
$var reg 3 K LIS_op [2:0] $end
$var reg 12 L csr_addr_o [11:0] $end
$var reg 3 M csr_op_o [2:0] $end
$var reg 2 N data_origin_o [1:0] $end
$var reg 3 O funct3 [2:0] $end
$var reg 7 P funct7 [6:0] $end
$var reg 12 Q imm12 [11:0] $end
$var reg 12 R imm12b [11:0] $end
$var reg 12 S imm12s [11:0] $end
$var reg 20 T imm20 [19:0] $end
$var reg 20 U imm20j [19:0] $end
$var reg 32 V imm_val_o [31:0] $end
$var reg 1 : is_branch_o $end
$var reg 1 9 is_load_store $end
$var reg 1 8 is_stall_o $end
$var reg 1 ) mem_req_o $end
$var reg 1 $ mem_w $end
$var reg 7 W opcode [6:0] $end
$var reg 5 X r1_addr [4:0] $end
$var reg 5 Y r2_addr [4:0] $end
$var reg 5 Z rd [4:0] $end
$var reg 5 [ reg_addr [4:0] $end
$var reg 1 . reg_w $end
$var reg 5 \ rs1 [4:0] $end
$var reg 5 ] rs2 [4:0] $end
$var reg 4 ^ write_transfer_o [3:0] $end
$upscope $end
$scope module crs_unit_inst $end
$var wire 1 ! clk $end
$var wire 12 _ csr_addr_i [11:0] $end
$var wire 3 ` csr_op_i [2:0] $end
$var wire 1 " rst_n $end
$var wire 64 a timer_val_i [63:0] $end
$var wire 32 b csr_val_i [31:0] $end
$var reg 32 c csr_val_o [31:0] $end
$var reg 64 d timer_val_o [63:0] $end
$var reg 1 e timer_we_o $end
$scope module timer_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 64 f val_i [63:0] $end
$var wire 1 e we_i $end
$var reg 64 g val_o [63:0] $end
$upscope $end
$upscope $end
$scope module exec_unit_inst $end
$var wire 4 h ALU_op [3:0] $end
$var wire 2 i BR_op [1:0] $end
$var wire 3 j LIS_op [2:0] $end
$var wire 3 k csr_op_i [2:0] $end
$var wire 32 l csr_val_i [31:0] $end
$var wire 2 m data_origin_i [1:0] $end
$var wire 32 n imm_val_i [31:0] $end
$var wire 1 : is_branch_i $end
$var wire 1 9 is_loadstore $end
$var wire 1 o zero_alu_result $end
$var wire 32 p val_mem_data_write_o [31:0] $end
$var wire 32 q val_mem_data_read_i [31:0] $end
$var wire 32 r rs2_i [31:0] $end
$var wire 32 s rs1_i [31:0] $end
$var wire 10 t old_pc_i [9:0] $end
$var wire 32 u new_pc_offset_o [31:0] $end
$var wire 32 v mem_o [31:0] $end
$var wire 32 w alu_o [31:0] $end
$var wire 10 x addr_mem_data_o [9:0] $end
$var reg 32 y csr_val_o [31:0] $end
$var reg 32 z d_o [31:0] $end
$var reg 1 ; is_absolute_o $end
$var reg 1 { is_conditional $end
$var reg 32 | s1_ALU [31:0] $end
$var reg 32 } s2_ALU [31:0] $end
$scope module ALU $end
$var wire 4 ~ ALU_op [3:0] $end
$var wire 32 !" s1 [31:0] $end
$var wire 32 "" s2 [31:0] $end
$var wire 1 o zero_o $end
$var wire 5 #" shift [4:0] $end
$var reg 32 $" d [31:0] $end
$upscope $end
$scope module BR $end
$var wire 1 o ALU_zero_i $end
$var wire 2 %" BR_op_i [1:0] $end
$var wire 32 &" alu_d [31:0] $end
$var wire 1 { is_conditional_i $end
$var wire 32 '" new_pc_i [31:0] $end
$var wire 32 (" old_pc_i [31:0] $end
$var wire 32 )" new_pc_o [31:0] $end
$var reg 32 *" offset [31:0] $end
$upscope $end
$scope module LIS $end
$var wire 3 +" LIS_op [2:0] $end
$var wire 32 ," addr_mem_i [31:0] $end
$var wire 32 -" val_mem_write_i [31:0] $end
$var wire 32 ." val_mem_read_i [31:0] $end
$var wire 10 /" addr_mem_o [9:0] $end
$var reg 32 0" val_mem_read_o [31:0] $end
$var reg 32 1" val_mem_write_o [31:0] $end
$upscope $end
$upscope $end
$scope module program_counter_inst $end
$var wire 1 ! clk $end
$var wire 1 ; is_absolute_i $end
$var wire 1 : is_branch_i $end
$var wire 1 8 is_stall_i $end
$var wire 10 2" offset_i [9:0] $end
$var wire 1 " rst_n $end
$var wire 10 3" offset [9:0] $end
$var reg 10 4" addr [9:0] $end
$upscope $end
$scope module reg_file_inst $end
$var wire 1 ! clk $end
$var wire 32 5" data_in [31:0] $end
$var wire 5 6" r1_num_read [4:0] $end
$var wire 5 7" r2_num_read [4:0] $end
$var wire 5 8" r_num_write [4:0] $end
$var wire 1 " rst_n $end
$var wire 1 . we $end
$var wire 32 9" rs2 [31:0] $end
$var wire 32 :" rs1 [31:0] $end
$scope begin REG $end
$var integer 32 ;" j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_data_inst $end
$var wire 10 <" addr [9:0] $end
$var wire 1 ! clk $end
$var wire 32 =" data_in [31:0] $end
$var wire 1 ) req_i $end
$var wire 1 " rst_n $end
$var wire 1 $ we $end
$var wire 4 >" write_transfer_i [3:0] $end
$var reg 32 ?" data_out [31:0] $end
$var reg 1 * gnt_o $end
$var reg 1 ( rvalid_o $end
$scope begin MEM $end
$var integer 32 @" j [31:0] $end
$scope begin MEM_READ $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_prog_inst $end
$var wire 10 A" addr [9:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var reg 32 B" data_out [31:0] $end
$scope begin MEM_READ $end
$var integer 32 C" j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000000000 C"
bx B"
b0 A"
b100000000 @"
bx ?"
b0 >"
b0 ="
b0 <"
b100000 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b100 3"
b0 2"
b0 1"
bx 0"
b0 /"
bx ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
0{
b0 z
b0 y
b0 x
b0 w
bx v
b0 u
b0 t
b0 s
b0 r
bx q
b0 p
1o
b0 n
b0 m
bx l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
0e
b0 d
bx c
b0 b
b0 a
b0 `
b0 _
b0 ^
bx ]
bx \
b0 [
bx Z
b0 Y
b0 X
bx W
b0 V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
bx H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
bx @
b0 ?
b0 >
b0 =
b0 <
0;
0:
09
08
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
bx 1
b0 0
bx /
0.
b0 -
b0 ,
b0 +
0*
0)
0(
bx '
b0 &
bx %
0$
b0 #
0"
0!
$end
#50000
b10000000000 C"
b100000000 @"
b100000 ;"
1!
#100000
0!
1"
#150000
b0 v
b0 0"
b0 '
b0 1
b0 q
b0 ."
b0 ?"
b100 ("
b100 +
b100 C
b100 t
b100 4"
b100 A"
b1 a
b1 g
b100 2"
0o
b100 7
b100 u
b100 )"
b100 ,
b100 D
b100 x
b100 /"
b100 <"
b100 w
b100 $"
b100 &"
b100 ,"
b100 #"
b0 3"
b0 *"
b0 >
b0 z
b0 5"
b100 }
b100 ""
b100 <
b100 V
b100 n
b100 '"
b1 =
b1 N
b1 m
b11 4
b11 [
b11 8"
1.
19
18
1)
b100 ]
b0 \
b11 S
b10000000001 R
b10 U
b11 Z
b100 Q
b10000000000 T
b0 O
b0 P
b11 W
b10000000000000110000011 %
b10000000000000110000011 /
b10000000000000110000011 H
b10000000000000110000011 B"
1!
#200000
0!
#250000
b100 3"
1*
b10 a
b10 g
b100 }
b100 ""
b1 E
b1 K
b1 j
b1 +"
b100 S
b10 R
b100000000010 U
b100 Z
b10000000001 T
b1 O
1)
08
b100 4
b100 [
b100 8"
b100 <
b100 V
b100 n
b100 '"
b1 =
b1 N
b1 m
1.
19
b10000000001001000000011 %
b10000000001001000000011 /
b10000000001001000000011 H
b10000000001001000000011 B"
1!
#300000
0!
#350000
b0 3"
18
1)
b100 4
b100 [
b100 8"
b100 <
b100 V
b100 n
b100 '"
b1 E
b1 K
b1 j
b1 +"
b1 =
b1 N
b1 m
1.
19
b100 }
b100 ""
0*
b1000 ("
b1000 +
b1000 C
b1000 t
b1000 4"
b1000 A"
b11 a
b11 g
1!
#400000
0!
#450000
b100 3"
1*
b100 a
b100 g
b100 }
b100 ""
b101 S
b10000000010 R
b1000000000010 U
b101 Z
b10000000010 T
b10 O
1)
08
b101 4
b101 [
b101 8"
b100 <
b100 V
b100 n
b100 '"
b10 E
b10 K
b10 j
b10 +"
b1 =
b1 N
b1 m
1.
19
b10000000010001010000011 %
b10000000010001010000011 /
b10000000010001010000011 H
b10000000010001010000011 B"
1!
#500000
0!
#550000
b0 3"
18
1)
b101 4
b101 [
b101 8"
b100 <
b100 V
b100 n
b100 '"
b10 E
b10 K
b10 j
b10 +"
b1 =
b1 N
b1 m
1.
19
b100 }
b100 ""
0*
b1100 ("
b1100 +
b1100 C
b1100 t
b1100 4"
b1100 A"
b101 a
b101 g
1!
#600000
0!
#650000
b100 3"
1*
b110 a
b110 g
b100 }
b100 ""
b110 S
b11 R
b10100000000010 U
b110 Z
b10000000101 T
b101 O
1)
08
b110 4
b110 [
b110 8"
b100 <
b100 V
b100 n
b100 '"
b100 E
b100 K
b100 j
b100 +"
b1 =
b1 N
b1 m
1.
19
b10000000101001100000011 %
b10000000101001100000011 /
b10000000101001100000011 H
b10000000101001100000011 B"
1!
#700000
0!
#750000
b0 3"
18
1)
b110 4
b110 [
b110 8"
b100 <
b100 V
b100 n
b100 '"
b100 E
b100 K
b100 j
b100 +"
b1 =
b1 N
b1 m
1.
19
b100 }
b100 ""
0*
b10000 ("
b10000 +
b10000 C
b10000 t
b10000 4"
b10000 A"
b111 a
b111 g
1!
#800000
0!
#850000
b100 3"
1*
b1000 a
b1000 g
b100 }
b100 ""
b111 S
b10000000011 R
b10000000000010 U
b111 Z
b10000000100 T
b100 O
1)
08
b111 4
b111 [
b111 8"
b100 <
b100 V
b100 n
b100 '"
b11 E
b11 K
b11 j
b11 +"
b1 =
b1 N
b1 m
1.
19
b10000000100001110000011 %
b10000000100001110000011 /
b10000000100001110000011 H
b10000000100001110000011 B"
1!
#900000
0!
#950000
b0 3"
18
1)
b111 4
b111 [
b111 8"
b100 <
b100 V
b100 n
b100 '"
b11 E
b11 K
b11 j
b11 +"
b1 =
b1 N
b1 m
1.
19
b100 }
b100 ""
0*
b10100 ("
b10100 +
b10100 C
b10100 t
b10100 4"
b10100 A"
b1001 a
b1001 g
1!
#1000000
0!
#1050000
1*
b1010 a
b1010 g
b0 2"
1o
b0 7
b0 u
b0 )"
b0 ,
b0 D
b0 x
b0 /"
b0 <"
b100 3"
b0 w
b0 $"
b0 &"
b0 ,"
b0 #"
b0 >
b0 z
b0 5"
b0 }
b0 ""
b0 ]
b0 S
b0 R
b0 U
b0 Z
b0 Q
b0 T
b0 O
b0 W
0)
08
b0 4
b0 [
b0 8"
b0 <
b0 V
b0 n
b0 '"
b0 E
b0 K
b0 j
b0 +"
b0 =
b0 N
b0 m
0.
09
b0 %
b0 /
b0 H
b0 B"
1!
#1100000
0!
#1150000
b10000 v
b10000 0"
b10000000100000001000000010000 '
b10000000100000001000000010000 1
b10000000100000001000000010000 q
b10000000100000001000000010000 ."
b10000000100000001000000010000 ?"
0*
b11000 ("
b11000 +
b11000 C
b11000 t
b11000 4"
b11000 A"
b1011 a
b1011 g
1!
#1200000
0!
#1250000
b0 v
b0 0"
b0 '
b0 1
b0 q
b0 ."
b0 ?"
b1100 a
b1100 g
b11100 ("
b11100 +
b11100 C
b11100 t
b11100 4"
b11100 A"
1!
#1300000
0!
#1350000
b100000 ("
b100000 +
b100000 C
b100000 t
b100000 4"
b100000 A"
b1101 a
b1101 g
1!
#1400000
0!
#1450000
b1110 a
b1110 g
b100100 ("
b100100 +
b100100 C
b100100 t
b100100 4"
b100100 A"
1!
#1500000
0!
#1550000
b101000 ("
b101000 +
b101000 C
b101000 t
b101000 4"
b101000 A"
b1111 a
b1111 g
1!
#1600000
0!
#1650000
b10000 a
b10000 g
b101100 ("
b101100 +
b101100 C
b101100 t
b101100 4"
b101100 A"
1!
#1700000
0!
