$date
	Thu Sep 19 10:45:52 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$scope module package_inst $end
$var wire 10 ! addr_mem_data [9:0] $end
$var wire 1 " clk $end
$var wire 1 # rst_n $end
$var wire 32 $ val_mem_data_write [31:0] $end
$var wire 1 % we_mem_data $end
$var wire 32 & val_mem_prog [31:0] $end
$var wire 32 ' val_mem_data_read [31:0] $end
$var wire 10 ( addr_mem_prog [9:0] $end
$scope module core_inst $end
$var wire 10 ) addr_mem_data_o [9:0] $end
$var wire 1 " clk $end
$var wire 1 * is_branch_t $end
$var wire 1 + is_load_store_t $end
$var wire 1 , mem_r_t $end
$var wire 1 - mem_to_reg_t $end
$var wire 1 . mem_w_t $end
$var wire 1 # rst_n $end
$var wire 32 / val_mem_data_o [31:0] $end
$var wire 1 % we_mem_data_o $end
$var wire 1 0 we_reg_file $end
$var wire 32 1 val_mem_prog_i [31:0] $end
$var wire 32 2 val_mem_data_i [31:0] $end
$var wire 32 3 rs2_reg_file [31:0] $end
$var wire 32 4 rs2_exec_unit_t [31:0] $end
$var wire 32 5 rs1_reg_file [31:0] $end
$var wire 32 6 rs1_exec_unit_t [31:0] $end
$var wire 5 7 r_num_write_reg_file [4:0] $end
$var wire 5 8 r2_num_read_reg_file [4:0] $end
$var wire 5 9 r1_num_read_reg_file [4:0] $end
$var wire 1 : is_imm_rs2 $end
$var wire 1 ; is_imm_rs1 $end
$var wire 32 < imm_val_rs2 [31:0] $end
$var wire 32 = imm_val_rs1 [31:0] $end
$var wire 32 > data_in_reg_file [31:0] $end
$var wire 10 ? addr_mem_prog_o [9:0] $end
$var wire 4 @ ALU_op_t [3:0] $end
$scope module controlUnit_inst $end
$var wire 1 + is_load_store $end
$var wire 1 , mem_r $end
$var wire 1 - mem_to_reg $end
$var wire 1 . mem_w $end
$var wire 10 A pc_i [9:0] $end
$var wire 32 B instruction [31:0] $end
$var reg 4 C ALU_op [3:0] $end
$var reg 3 D funct3 [2:0] $end
$var reg 7 E funct7 [6:0] $end
$var reg 12 F imm12 [11:0] $end
$var reg 12 G imm12b [11:0] $end
$var reg 20 H imm20 [19:0] $end
$var reg 20 I imm20j [19:0] $end
$var reg 32 J imm_val_rs1_o [31:0] $end
$var reg 32 K imm_val_rs2_o [31:0] $end
$var reg 1 ; is_imm_rs1_o $end
$var reg 1 : is_imm_rs2_o $end
$var reg 7 L opcode [6:0] $end
$var reg 5 M r1_addr [4:0] $end
$var reg 5 N r2_addr [4:0] $end
$var reg 5 O rd [4:0] $end
$var reg 5 P reg_addr [4:0] $end
$var reg 1 0 reg_r $end
$var reg 5 Q rs1 [4:0] $end
$var reg 5 R rs2 [4:0] $end
$upscope $end
$scope module exec_unit_inst $end
$var wire 4 S ALU_op [3:0] $end
$var wire 1 * is_branch $end
$var wire 1 + is_loadstore $end
$var wire 32 T s2 [31:0] $end
$var wire 32 U s1 [31:0] $end
$var wire 32 V d [31:0] $end
$scope module ALU $end
$var wire 4 W ALU_op [3:0] $end
$var wire 5 X shift [4:0] $end
$var wire 32 Y s2 [31:0] $end
$var wire 32 Z s1 [31:0] $end
$var reg 32 [ d [31:0] $end
$upscope $end
$upscope $end
$scope module mux_rs1_exec_inst $end
$var wire 32 \ b [31:0] $end
$var wire 1 ; select $end
$var wire 32 ] out [31:0] $end
$var wire 32 ^ a [31:0] $end
$upscope $end
$scope module mux_rs2_exec_inst $end
$var wire 32 _ b [31:0] $end
$var wire 1 : select $end
$var wire 32 ` out [31:0] $end
$var wire 32 a a [31:0] $end
$upscope $end
$scope module program_counter_inst $end
$var wire 1 " clk $end
$var wire 1 # rst_n $end
$var reg 10 b addr [9:0] $end
$upscope $end
$scope module reg_file_inst $end
$var wire 1 " clk $end
$var wire 32 c data_in [31:0] $end
$var wire 5 d r1_num_read [4:0] $end
$var wire 5 e r2_num_read [4:0] $end
$var wire 5 f r_num_write [4:0] $end
$var wire 1 # rst_n $end
$var wire 1 0 we $end
$var wire 32 g rs2 [31:0] $end
$var wire 32 h rs1 [31:0] $end
$scope begin REG $end
$var integer 32 i j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_data_inst $end
$var wire 10 j addr [9:0] $end
$var wire 1 " clk $end
$var wire 32 k data_in [31:0] $end
$var wire 1 # rst_n $end
$var wire 1 % we $end
$var reg 32 l data_out [31:0] $end
$scope begin MEM_WRITE $end
$var integer 32 m j [31:0] $end
$upscope $end
$upscope $end
$scope module mem_prog_inst $end
$var wire 10 n addr [9:0] $end
$var wire 1 " clk $end
$var wire 1 # rst_n $end
$var reg 32 o data_out [31:0] $end
$scope begin MEM_READ $end
$var integer 32 p j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000000000 p
bx o
b0 n
b10000000000 m
bx l
bz k
bz j
b100000 i
bx h
bx g
bx f
bx e
bx d
bx c
b0 b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
b0 A
bx @
b0 ?
bx >
bx =
bx <
0;
0:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
x0
bz /
z.
z-
z,
z+
z*
bz )
b0 (
bx '
bx &
z%
bz $
0#
0"
bz !
$end
#50000
b10000000000 p
b10000000000 m
b100000 i
1"
#100000
0"
1#
#150000
b100 (
b100 ?
b100 A
b100 b
b100 n
b0 X
b11111111111111111111000000000100 >
b11111111111111111111000000000100 V
b11111111111111111111000000000100 [
b11111111111111111111000000000100 c
b100 6
b100 U
b100 Z
b100 ]
b11111111111111111111000000000000 4
b11111111111111111111000000000000 T
b11111111111111111111000000000000 Y
b11111111111111111111000000000000 `
b10 7
b10 P
b10 f
10
b0 @
b0 C
b0 S
b0 W
b100 =
b100 J
b100 \
1;
b11111111111111111111000000000000 <
b11111111111111111111000000000000 K
b11111111111111111111000000000000 _
1:
b11111 R
b11111 Q
b101111110001 G
b11111111111111111111 I
b10 O
b111111111111 F
b11111111111111111111 H
b111 D
b1111111 E
b10111 L
b11111111111111111111000100010111 &
b11111111111111111111000100010111 1
b11111111111111111111000100010111 B
b11111111111111111111000100010111 o
1"
#200000
0"
#250000
b1000 6
b1000 U
b1000 Z
b1000 ]
b1000 =
b1000 J
b1000 \
b1000 (
b1000 ?
b1000 A
b1000 b
b1000 n
b10101010101010101010000000001000 >
b10101010101010101010000000001000 V
b10101010101010101010000000001000 [
b10101010101010101010000000001000 c
b10101010101010101010000000000000 4
b10101010101010101010000000000000 T
b10101010101010101010000000000000 Y
b10101010101010101010000000000000 `
b11 7
b11 P
b11 f
b10101010101010101010000000000000 <
b10101010101010101010000000000000 K
b10101010101010101010000000000000 _
b1010 R
b10101 Q
b110101010001 G
b11010101000101010101 I
b11 O
b101010101010 F
b10101010101010101010 H
b10 D
b1010101 E
1:
1;
b10101010101010101010000110010111 &
b10101010101010101010000110010111 1
b10101010101010101010000110010111 B
b10101010101010101010000110010111 o
1"
#300000
0"
#350000
b1100 6
b1100 U
b1100 Z
b1100 ]
b1100 =
b1100 J
b1100 \
b1100 (
b1100 ?
b1100 A
b1100 b
b1100 n
b1010101010101010101000000001100 >
b1010101010101010101000000001100 V
b1010101010101010101000000001100 [
b1010101010101010101000000001100 c
b1010101010101010101000000000000 4
b1010101010101010101000000000000 T
b1010101010101010101000000000000 Y
b1010101010101010101000000000000 `
b100 7
b100 P
b100 f
b1010101010101010101000000000000 <
b1010101010101010101000000000000 K
b1010101010101010101000000000000 _
b10101 R
b1010 Q
b1010100010 G
b101010111010101010 I
b100 O
b10101010101 F
b1010101010101010101 H
b101 D
b101010 E
1:
1;
b1010101010101010101001000010111 &
b1010101010101010101001000010111 1
b1010101010101010101001000010111 B
b1010101010101010101001000010111 o
1"
#400000
0"
#450000
b10000 (
b10000 ?
b10000 A
b10000 b
b10000 n
bx X
bx >
bx V
bx [
bx c
bx 4
bx T
bx Y
bx `
bx 6
bx U
bx Z
bx ]
b0 R
b0 Q
b0 G
b0 I
b0 O
b0 F
b0 H
b0 D
b0 E
b0 L
0:
0;
b0 &
b0 1
b0 B
b0 o
1"
#500000
0"
#550000
b10100 (
b10100 ?
b10100 A
b10100 b
b10100 n
1"
#600000
0"
