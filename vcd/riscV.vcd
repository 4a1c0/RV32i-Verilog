$date
	Wed Nov 13 22:24:33 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module csr_test $end
$scope module TB $end
$scope module top_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 4 # write_transfer [3:0] $end
$var wire 1 $ we_mem_data $end
$var wire 32 % val_mem_prog [31:0] $end
$var wire 32 & val_mem_data_write [31:0] $end
$var wire 32 ' val_mem_data_read [31:0] $end
$var wire 10 ( addr_mem_prog [9:0] $end
$var wire 10 ) addr_mem_data [9:0] $end
$scope module core_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 4 * write_transfer_mem_data_o [3:0] $end
$var wire 1 + we_reg_file $end
$var wire 1 $ we_mem_data_o $end
$var wire 32 , val_mem_prog_i [31:0] $end
$var wire 32 - val_mem_data_write_o [31:0] $end
$var wire 32 . val_mem_data_read_i [31:0] $end
$var wire 32 / rs2_reg_file [31:0] $end
$var wire 32 0 rs1_reg_file [31:0] $end
$var wire 5 1 r_num_write_reg_file [4:0] $end
$var wire 5 2 r2_num_read_reg_file [4:0] $end
$var wire 5 3 r1_num_read_reg_file [4:0] $end
$var wire 32 4 new_pc [31:0] $end
$var wire 1 5 is_load_store_t $end
$var wire 1 6 is_branch_t $end
$var wire 1 7 is_absolute_t $end
$var wire 32 8 imm_val_t [31:0] $end
$var wire 2 9 data_origin_t [1:0] $end
$var wire 32 : data_in_reg_file [31:0] $end
$var wire 32 ; csr_val_w [31:0] $end
$var wire 32 < csr_val_r [31:0] $end
$var wire 3 = csr_op_t [2:0] $end
$var wire 12 > csr_addr_t [11:0] $end
$var wire 10 ? addr_mem_prog_o [9:0] $end
$var wire 10 @ addr_mem_data_o [9:0] $end
$var wire 3 A LIS_op_t [2:0] $end
$var wire 2 B BR_op_t [1:0] $end
$var wire 4 C ALU_op_t [3:0] $end
$scope module controlUnit_inst $end
$var wire 32 D instruction [31:0] $end
$var reg 4 E ALU_op [3:0] $end
$var reg 2 F BR_op_o [1:0] $end
$var reg 3 G LIS_op [2:0] $end
$var reg 12 H csr_addr_o [11:0] $end
$var reg 3 I csr_op_o [2:0] $end
$var reg 2 J data_origin_o [1:0] $end
$var reg 3 K funct3 [2:0] $end
$var reg 7 L funct7 [6:0] $end
$var reg 12 M imm12 [11:0] $end
$var reg 12 N imm12b [11:0] $end
$var reg 12 O imm12s [11:0] $end
$var reg 20 P imm20 [19:0] $end
$var reg 20 Q imm20j [19:0] $end
$var reg 32 R imm_val_o [31:0] $end
$var reg 1 6 is_branch_o $end
$var reg 1 5 is_load_store $end
$var reg 1 $ mem_w $end
$var reg 7 S opcode [6:0] $end
$var reg 5 T r1_addr [4:0] $end
$var reg 5 U r2_addr [4:0] $end
$var reg 5 V rd [4:0] $end
$var reg 5 W reg_addr [4:0] $end
$var reg 1 + reg_w $end
$var reg 5 X rs1 [4:0] $end
$var reg 5 Y rs2 [4:0] $end
$var reg 4 Z write_transfer_o [3:0] $end
$upscope $end
$scope module crs_unit_inst $end
$var wire 1 ! clk $end
$var wire 12 [ csr_addr_i [11:0] $end
$var wire 3 \ csr_op_i [2:0] $end
$var wire 1 " rst_n $end
$var wire 64 ] timer_val_i [63:0] $end
$var wire 32 ^ csr_val_i [31:0] $end
$var reg 32 _ csr_val_o [31:0] $end
$var reg 64 ` instret_csr [63:0] $end
$var reg 64 a timer_val_o [63:0] $end
$var reg 1 b timer_we_o $end
$scope module timer_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 64 c val_i [63:0] $end
$var wire 1 b we_i $end
$var reg 64 d val_o [63:0] $end
$upscope $end
$upscope $end
$scope module exec_unit_inst $end
$var wire 4 e ALU_op [3:0] $end
$var wire 2 f BR_op [1:0] $end
$var wire 3 g LIS_op [2:0] $end
$var wire 3 h csr_op_i [2:0] $end
$var wire 32 i csr_val_i [31:0] $end
$var wire 2 j data_origin_i [1:0] $end
$var wire 32 k imm_val_i [31:0] $end
$var wire 1 6 is_branch_i $end
$var wire 1 5 is_loadstore $end
$var wire 1 l zero_alu_result $end
$var wire 32 m val_mem_data_write_o [31:0] $end
$var wire 32 n val_mem_data_read_i [31:0] $end
$var wire 32 o rs2_i [31:0] $end
$var wire 32 p rs1_i [31:0] $end
$var wire 10 q old_pc_i [9:0] $end
$var wire 32 r new_pc_offset_o [31:0] $end
$var wire 32 s mem_o [31:0] $end
$var wire 32 t alu_o [31:0] $end
$var wire 10 u addr_mem_data_o [9:0] $end
$var reg 32 v csr_val_o [31:0] $end
$var reg 32 w d_o [31:0] $end
$var reg 1 7 is_absolute_o $end
$var reg 1 x is_conditional $end
$var reg 32 y s1_ALU [31:0] $end
$var reg 32 z s2_ALU [31:0] $end
$scope module ALU $end
$var wire 4 { ALU_op [3:0] $end
$var wire 32 | s1 [31:0] $end
$var wire 32 } s2 [31:0] $end
$var wire 1 l zero_o $end
$var wire 5 ~ shift [4:0] $end
$var reg 32 !" d [31:0] $end
$upscope $end
$scope module BR $end
$var wire 1 l ALU_zero_i $end
$var wire 2 "" BR_op_i [1:0] $end
$var wire 32 #" alu_d [31:0] $end
$var wire 1 x is_conditional_i $end
$var wire 32 $" new_pc_i [31:0] $end
$var wire 32 %" old_pc_i [31:0] $end
$var wire 32 &" new_pc_o [31:0] $end
$var reg 32 '" offset [31:0] $end
$upscope $end
$scope module LIS $end
$var wire 3 (" LIS_op [2:0] $end
$var wire 32 )" addr_mem_i [31:0] $end
$var wire 32 *" val_mem_write_i [31:0] $end
$var wire 32 +" val_mem_read_i [31:0] $end
$var wire 10 ," addr_mem_o [9:0] $end
$var reg 32 -" val_mem_read_o [31:0] $end
$var reg 32 ." val_mem_write_o [31:0] $end
$upscope $end
$upscope $end
$scope module program_counter_inst $end
$var wire 1 ! clk $end
$var wire 1 7 is_absolute_i $end
$var wire 1 6 is_branch_i $end
$var wire 10 /" offset_i [9:0] $end
$var wire 1 " rst_n $end
$var wire 10 0" offset [9:0] $end
$var reg 10 1" addr [9:0] $end
$upscope $end
$scope module reg_file_inst $end
$var wire 1 ! clk $end
$var wire 32 2" data_in [31:0] $end
$var wire 5 3" r1_num_read [4:0] $end
$var wire 5 4" r2_num_read [4:0] $end
$var wire 5 5" r_num_write [4:0] $end
$var wire 1 " rst_n $end
$var wire 1 + we $end
$var wire 32 6" rs2 [31:0] $end
$var wire 32 7" rs1 [31:0] $end
$scope begin REG $end
$var integer 32 8" j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_data_inst $end
$var wire 10 9" addr [9:0] $end
$var wire 1 ! clk $end
$var wire 32 :" data_in [31:0] $end
$var wire 1 " rst_n $end
$var wire 1 $ we $end
$var wire 4 ;" write_transfer_i [3:0] $end
$var wire 32 <" data_out [31:0] $end
$scope begin MEM_WRITE $end
$var integer 32 =" j [31:0] $end
$upscope $end
$upscope $end
$scope module mem_prog_inst $end
$var wire 10 >" addr [9:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var reg 32 ?" data_out [31:0] $end
$scope begin MEM_READ $end
$var integer 32 @" j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000000000 @"
bx ?"
b0 >"
b10000000000 ="
bx <"
bx ;"
bx :"
bx 9"
b100000 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
b0 1"
b100 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
b0 %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
0x
bx w
bx v
bx u
bx t
bx s
bx r
b0 q
bx p
bx o
bx n
bx m
xl
bx k
bx j
bx i
bx h
bx g
bx f
bx e
b0 d
b0 c
0b
b0 a
bx `
bx _
bx ^
b0 ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
b0 ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
07
x6
x5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
x+
bx *
bx )
b0 (
bx '
bx &
bx %
x$
bx #
0"
0!
$end
#50000
b10000000000 @"
b10000000000 ="
b100000 8"
1!
#100000
0!
1"
#150000
b100 %"
b100 (
b100 ?
b100 q
b100 1"
b100 >"
b1 ]
b1 d
b0 ;
b0 ^
b0 v
b0 /
b0 o
b0 *"
b0 6"
b0 0
b0 p
b0 7"
b0 '"
b0 Y
b0 X
b110000000001 O
b111000000000 N
b10000001001000000000 Q
b1 V
b110000000000 M
b11000000000000000010 P
b10 K
b1100000 L
b1110011 S
b0 2
b0 U
b0 4"
b0 3
b0 T
b0 3"
b1 1
b1 W
b1 5"
b0 8
b0 R
b0 k
b0 $"
b110000000000 >
b110000000000 H
b110000000000 [
b10 =
b10 I
b10 \
b10 h
b0 A
b0 G
b0 g
b0 ("
b0 B
b0 F
b0 f
b0 ""
b0 C
b0 E
b0 e
b0 {
b0 9
b0 J
b0 j
06
1+
05
b0 #
b0 *
b0 Z
b0 ;"
0$
b11000000000000000010000011110011 %
b11000000000000000010000011110011 ,
b11000000000000000010000011110011 D
b11000000000000000010000011110011 ?"
1!
#200000
0!
#250000
b1 :
b1 w
b1 2"
b1 <
b1 _
b1 i
b10 ]
b10 d
b1000 %"
b1000 (
b1000 ?
b1000 q
b1000 1"
b1000 >"
b1 Y
b110000000010 O
b101000000001 N
b10000001011000000000 Q
b10 V
b110000000001 M
b11000000000100000010 P
b10 1
b10 W
b10 5"
b110000000001 >
b110000000001 H
b110000000001 [
b10 =
b10 I
b10 \
b10 h
1+
b11000000000100000010000101110011 %
b11000000000100000010000101110011 ,
b11000000000100000010000101110011 D
b11000000000100000010000101110011 ?"
1!
#300000
0!
#350000
b10 :
b10 w
b10 2"
b1100 %"
b1100 (
b1100 ?
b1100 q
b1100 1"
b1100 >"
b11 ]
b11 d
b10 <
b10 _
b10 i
b10 Y
b110000000011 O
b111000000001 N
b10000001001000000001 Q
b11 V
b110000000010 M
b11000000001000000010 P
b11 1
b11 W
b11 5"
b110000000010 >
b110000000010 H
b110000000010 [
b10 =
b10 I
b10 \
b10 h
1+
b11000000001000000010000111110011 %
b11000000001000000010000111110011 ,
b11000000001000000010000111110011 D
b11000000001000000010000111110011 ?"
1!
#400000
0!
#450000
b11 <
b11 _
b11 i
b100 ]
b100 d
b10000 %"
b10000 (
b10000 ?
b10000 q
b10000 1"
b10000 >"
b10000 s
b10000 -"
b10000000100000001000000010000 '
b10000000100000001000000010000 .
b10000000100000001000000010000 n
b10000000100000001000000010000 +"
b10000000100000001000000010000 <"
1l
b0 /"
b0 4
b0 r
b0 &"
b0 )
b0 @
b0 u
b0 ,"
b0 9"
b0 ~
b0 t
b0 !"
b0 #"
b0 )"
b0 :
b0 w
b0 2"
b0 z
b0 }
b0 y
b0 |
b0 Y
b0 O
b0 N
b0 Q
b0 V
b0 M
b0 P
b0 K
b0 L
b0 S
b0 1
b0 W
b0 5"
b0 >
b0 H
b0 [
b0 =
b0 I
b0 \
b0 h
0+
b0 %
b0 ,
b0 D
b0 ?"
1!
#500000
0!
